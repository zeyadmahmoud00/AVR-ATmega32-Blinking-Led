
blinking led source code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001f8  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000227  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000235  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c20  00000000  00000000  0000028d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000615  00000000  00000000  00000ead  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000038d  00000000  00000000  000014c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00001850  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001cc  00000000  00000000  000018c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b0  00000000  00000000  00001a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001c44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000176  00000176  000001ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001c7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.HLED_vidInit 00000068  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.HLED_vidLedToggle 00000068  000000d4  000000d4  00000148  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    00000024  0000013c  0000013c  000001b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_fini 00000002  0000017e  0000017e  000001f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_funcs_on_exit 00000002  00000180  00000180  000001f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_simulator_exit 00000002  00000182  00000182  000001f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.exit    00000016  00000160  00000160  000001d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text._Exit   00000004  0000017a  0000017a  000001ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
   8:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
   c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  10:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  14:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  18:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  1c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  20:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  24:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  28:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  2c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  30:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  34:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  38:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  3c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  40:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  44:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  48:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  4c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  50:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 9e 00 	call	0x13c	; 0x13c <main>
  64:	0c 94 b0 00 	jmp	0x160	; 0x160 <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

00000176 <__bad_interrupt>:
 176:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.HLED_vidInit:

0000006c <HLED_vidInit>:
      break;
    case PORT_C:
      CLEARBIT(PORTC,Copy_u8Pin);
      break;
    case PORT_D:
      CLEARBIT(PORTD,Copy_u8Pin);
  6c:	81 30       	cpi	r24, 0x01	; 1
  6e:	89 f0       	breq	.+34     	; 0x92 <HLED_vidInit+0x26>
  70:	28 f0       	brcs	.+10     	; 0x7c <HLED_vidInit+0x10>
  72:	82 30       	cpi	r24, 0x02	; 2
  74:	c9 f0       	breq	.+50     	; 0xa8 <HLED_vidInit+0x3c>
  76:	83 30       	cpi	r24, 0x03	; 3
  78:	11 f1       	breq	.+68     	; 0xbe <HLED_vidInit+0x52>
  7a:	08 95       	ret
  7c:	2a b3       	in	r18, 0x1a	; 26
  7e:	81 e0       	ldi	r24, 0x01	; 1
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	02 c0       	rjmp	.+4      	; 0x88 <HLED_vidInit+0x1c>
  84:	88 0f       	add	r24, r24
  86:	99 1f       	adc	r25, r25
  88:	6a 95       	dec	r22
  8a:	e2 f7       	brpl	.-8      	; 0x84 <HLED_vidInit+0x18>
  8c:	82 2b       	or	r24, r18
  8e:	8a bb       	out	0x1a, r24	; 26
  90:	08 95       	ret
  92:	27 b3       	in	r18, 0x17	; 23
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	02 c0       	rjmp	.+4      	; 0x9e <HLED_vidInit+0x32>
  9a:	88 0f       	add	r24, r24
  9c:	99 1f       	adc	r25, r25
  9e:	6a 95       	dec	r22
  a0:	e2 f7       	brpl	.-8      	; 0x9a <HLED_vidInit+0x2e>
  a2:	82 2b       	or	r24, r18
  a4:	87 bb       	out	0x17, r24	; 23
  a6:	08 95       	ret
  a8:	24 b3       	in	r18, 0x14	; 20
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <HLED_vidInit+0x48>
  b0:	88 0f       	add	r24, r24
  b2:	99 1f       	adc	r25, r25
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <HLED_vidInit+0x44>
  b8:	82 2b       	or	r24, r18
  ba:	84 bb       	out	0x14, r24	; 20
  bc:	08 95       	ret
  be:	21 b3       	in	r18, 0x11	; 17
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	02 c0       	rjmp	.+4      	; 0xca <HLED_vidInit+0x5e>
  c6:	88 0f       	add	r24, r24
  c8:	99 1f       	adc	r25, r25
  ca:	6a 95       	dec	r22
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <HLED_vidInit+0x5a>
  ce:	82 2b       	or	r24, r18
  d0:	81 bb       	out	0x11, r24	; 17
  d2:	08 95       	ret

Disassembly of section .text.HLED_vidLedToggle:

000000d4 <HLED_vidLedToggle>:
  Function Argument    :  u8 Copy_u8Port, u8 Copy_u8Pin
  Function description :  Toggle the led
**/

void HLED_vidLedToggle(u8 Copy_u8Port, u8 Copy_u8Pin){
  switch(Copy_u8Port){
  d4:	81 30       	cpi	r24, 0x01	; 1
  d6:	89 f0       	breq	.+34     	; 0xfa <HLED_vidLedToggle+0x26>
  d8:	28 f0       	brcs	.+10     	; 0xe4 <HLED_vidLedToggle+0x10>
  da:	82 30       	cpi	r24, 0x02	; 2
  dc:	c9 f0       	breq	.+50     	; 0x110 <HLED_vidLedToggle+0x3c>
  de:	83 30       	cpi	r24, 0x03	; 3
  e0:	11 f1       	breq	.+68     	; 0x126 <HLED_vidLedToggle+0x52>
  e2:	08 95       	ret
    case PORT_A:
      TOGGLEBIT(PORTA,Copy_u8Pin);
  e4:	2b b3       	in	r18, 0x1b	; 27
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <HLED_vidLedToggle+0x1c>
  ec:	88 0f       	add	r24, r24
  ee:	99 1f       	adc	r25, r25
  f0:	6a 95       	dec	r22
  f2:	e2 f7       	brpl	.-8      	; 0xec <HLED_vidLedToggle+0x18>
  f4:	82 27       	eor	r24, r18
  f6:	8b bb       	out	0x1b, r24	; 27
      break;
  f8:	08 95       	ret
    case PORT_B:
      TOGGLEBIT(PORTB,Copy_u8Pin);
  fa:	28 b3       	in	r18, 0x18	; 24
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <HLED_vidLedToggle+0x32>
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	6a 95       	dec	r22
 108:	e2 f7       	brpl	.-8      	; 0x102 <HLED_vidLedToggle+0x2e>
 10a:	82 27       	eor	r24, r18
 10c:	88 bb       	out	0x18, r24	; 24
      break;
 10e:	08 95       	ret
    case PORT_C:
      TOGGLEBIT(PORTC,Copy_u8Pin);
 110:	25 b3       	in	r18, 0x15	; 21
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	02 c0       	rjmp	.+4      	; 0x11c <HLED_vidLedToggle+0x48>
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	6a 95       	dec	r22
 11e:	e2 f7       	brpl	.-8      	; 0x118 <HLED_vidLedToggle+0x44>
 120:	82 27       	eor	r24, r18
 122:	85 bb       	out	0x15, r24	; 21
      break;
 124:	08 95       	ret
    case PORT_D:
      TOGGLEBIT(PORTD,Copy_u8Pin);
 126:	22 b3       	in	r18, 0x12	; 18
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	02 c0       	rjmp	.+4      	; 0x132 <HLED_vidLedToggle+0x5e>
 12e:	88 0f       	add	r24, r24
 130:	99 1f       	adc	r25, r25
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <HLED_vidLedToggle+0x5a>
 136:	82 27       	eor	r24, r18
 138:	82 bb       	out	0x12, r24	; 18
 13a:	08 95       	ret

Disassembly of section .text.main:

0000013c <main>:

#include <xc.h>
#include <avr/delay.h>
int main(void)
{
	HLED_vidInit(PORT_A,PIN0);
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	0e 94 36 00 	call	0x6c	; 0x6c <__data_load_end>
    while(1)
    {
        HLED_vidLedToggle(PORT_A,PIN0);
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	0e 94 6a 00 	call	0xd4	; 0xd4 <HLED_vidLedToggle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14c:	2f e9       	ldi	r18, 0x9F	; 159
 14e:	86 e8       	ldi	r24, 0x86	; 134
 150:	91 e0       	ldi	r25, 0x01	; 1
 152:	21 50       	subi	r18, 0x01	; 1
 154:	80 40       	sbci	r24, 0x00	; 0
 156:	90 40       	sbci	r25, 0x00	; 0
 158:	e1 f7       	brne	.-8      	; 0x152 <main+0x16>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <main+0x20>
 15c:	00 00       	nop
 15e:	f2 cf       	rjmp	.-28     	; 0x144 <main+0x8>

Disassembly of section .text.__dummy_fini:

0000017e <_fini>:
 17e:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000180 <__funcs_on_exit>:
 180:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000182 <__simulator_exit>:
 182:	08 95       	ret

Disassembly of section .text.exit:

00000160 <exit>:
 160:	ec 01       	movw	r28, r24
 162:	0e 94 c0 00 	call	0x180	; 0x180 <__funcs_on_exit>
 166:	0e 94 bf 00 	call	0x17e	; 0x17e <_fini>
 16a:	ce 01       	movw	r24, r28
 16c:	0e 94 c1 00 	call	0x182	; 0x182 <__simulator_exit>
 170:	ce 01       	movw	r24, r28
 172:	0e 94 bd 00 	call	0x17a	; 0x17a <_Exit>

Disassembly of section .text._Exit:

0000017a <_Exit>:
 17a:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
